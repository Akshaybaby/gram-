// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  bio               String?
  location          String?
  denomination      String?
  website           String?
  isVerified        Boolean   @default(false)
  isPrivate         Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  bookmarks    Bookmark[]
  followers    Follow[] @relation("UserFollowers")
  following    Follow[] @relation("UserFollowing")
  sentMessages Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  prayerRequests PrayerRequest[]
  prayerSupport PrayerSupport[]
  forumPosts   ForumPost[]
  forumComments ForumComment[]
  events       Event[]
  eventAttendees EventAttendee[]
  groupMembers GroupMember[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String    @id @default(cuid())
  content     String
  mediaUrls   String[]
  videoUrl    String?
  youtubeUrl  String?
  bibleVerse  Json?     // { text: string, reference: string }
  location    String?
  isPrivate   Boolean   @default(false)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  mediaUrl   String?
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}

model PrayerRequest {
  id          String   @id @default(cuid())
  title       String
  description String
  isPublic    Boolean  @default(true)
  isAnswered  Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  support PrayerSupport[]
}

model PrayerSupport {
  id              String @id @default(cuid())
  userId          String
  prayerRequestId String

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  prayerRequest  PrayerRequest @relation(fields: [prayerRequestId], references: [id], onDelete: Cascade)

  @@unique([userId, prayerRequestId])
}

model Forum {
  id          String @id @default(cuid())
  name        String
  description String
  category    String
  isPublic    Boolean @default(true)
  createdAt   DateTime @default(now())

  posts ForumPost[]
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  forumId   String
  userId    String
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  forum    Forum          @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments ForumComment[]
}

model ForumComment {
  id          String   @id @default(cuid())
  content     String
  forumPostId String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  forumPost ForumPost @relation(fields: [forumPostId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  eventDate   DateTime
  eventType   String   // 'mass', 'retreat', 'meetup', 'prayer'
  maxAttendees Int?
  isPublic    Boolean  @default(true)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organizer User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  attendees EventAttendee[]
}

model EventAttendee {
  id      String @id @default(cuid())
  userId  String
  eventId String
  status  String @default("attending") // 'attending', 'maybe', 'not_attending'

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Group {
  id          String @id @default(cuid())
  name        String
  description String
  groupType   String // 'prayer', 'bible_study', 'youth', 'ministry'
  isPrivate   Boolean @default(false)
  createdAt   DateTime @default(now())

  members GroupMember[]
}

model GroupMember {
  id      String @id @default(cuid())
  userId  String
  groupId String
  role    String @default("member") // 'admin', 'moderator', 'member'

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model BibleBookmark {
  id        String @id @default(cuid())
  userId    String
  book      String
  chapter   Int
  verse     Int
  translation String
  createdAt DateTime @default(now())

  @@unique([userId, book, chapter, verse, translation])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   // 'like', 'comment', 'follow', 'prayer_request', 'event_reminder'
  title     String
  content   String
  isRead    Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}